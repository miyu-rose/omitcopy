 ;=========================================================================================
;
; TSR(常駐プログラム)ライブラリ version 1.01  by Hau & みゆ (miyu rose)
;
;        Programmer        みゆ (miyu rose)
;                          X68KBBS：X68K0001
;                          Twitter：@arith_rose
;
;        Special Adviser   はう (Hau) さま
;                 Tester   X68KBBS：X68K0024
;                          Twitter：@Hau_oli
;
;=========================================================================================

    .cpu        68000

    .include    doscall.mac

;=========================================================================================

    .text
    .even

;=========================================================================================
; 常駐部（メモリブロック内のオフセット は $100）
;-----------------------------------------------------------------------------------------
TSR_begin:

TSR_marker:                                     ; 常駐マーカーアドレス
TSR_MARKER_U:
    .dc.l       $00000000                       ; 常駐マーカーの上位 4 Bytes
TSR_MARKER_D:
    .dc.l       $00000000                       ; 常駐マーカーの下位 4 Bytes
    .even

TSR_new_vector:                                 ; 常駐時の割込ベクタ先
TSR_main:
    .include    TSRmain.s                       ; 常駐処理ルーチン
    rte                                         ; 割り込みから復帰

TSR_work:                                       ; 常駐ワークエリア
TSR_SAVE_VECTORADDR:                            ; 常駐前の割込ベクタ格納アドレス
    .dc.l       $00000000                       ; 常駐前の割込ベクタ
    .even

TSR_end:
;=========================================================================================

;=========================================================================================
; 常駐準備サブルーチン
;
; 引数 a0.l     : 自身のプロセス管理ポインタ先頭アドレス
;      a1.l     : 割込ベクタ格納アドレス
;      d0.l     : 常駐マーカー上位ロングワード
;      d1.l     : 常駐マーカー下位ロングワード
;
;-----------------------------------------------------------------------------------------

TSR_prepare::
    move.l  a0,TSR_PROCESS_POINTER              ; 自身のプロセス管理ポインタを保存
    move.l  a1,TSR_VECTORADDR                   ; 割込ベクタ格納アドレスを保存
    move.l  d0,TSR_MARKER_U                     ; 常駐マーカー上位ロングワードを保存
    move.l  d1,TSR_MARKER_D                     ; 常駐マーカー下位ロングワードを保存

    clr.l   -(sp)                               ; USP を SSP に設定するモード
    DOS     _SUPER                              ; スーパーバイザーモードへ移行
    move.l  d0,(sp)                             ; 元々の SSP / エラーコード退避

;-----------------------------------------------------------------------------------------

    move.l  (a1),TSR_SAVE_VECTORADDR            ; 現在の割込ベクタを保存

;-----------------------------------------------------------------------------------------

    tst.l   (sp)                                ; 元々のSSP / エラーコードチェック
    bmi     @f                                  ; エラーコードなら次へ

    DOS     _SUPER                              ; ユーザモードへ復帰
@@:
    addq.l  #4,sp

    rts

;=========================================================================================

;=========================================================================================
; 常駐チェックサブルーチン
;
; 返値 d0.l = 1 : 未常駐（マーカー無検出）
;             0 : 常駐済（マーカー検出）
;            -1 : 未準備
;      ccrZ  ne : 未常駐／未準備
;            eq : 常駐済（マーカー検出）
;      ccrN  gt : 未常駐（マーカー無検出）
;            mi : 未準備
;
;-----------------------------------------------------------------------------------------

TSR_check::
    movem.l d1/a1-a3,-(sp)                      ; d1/a1-a3 を退避

    clr.l   -(sp)                               ; USP を SSP に設定するモード
    DOS     _SUPER                              ; スーパーバイザーモードへ移行
    move.l  d0,(sp)                             ; 元々の SSP / エラーコード退避

;-----------------------------------------------------------------------------------------

    moveq.l #-1,d1                              ; d1 : 返値候補を -1（未準備）に

    tst.l   TSR_VECTORADDR                      ; 割込ベクタ格納アドレスが
    beq     @f                                  ;  0 なら未準備なので処理をスキップ

    movea.l TSR_VECTORADDR,a1                   ; a1 : 割込ベクタ格納アドレス
    movea.l (a1),a2                             ; a2 : 現在の割込ベクタ
    subq.l  #TSR_new_vector-TSR_marker,a2       ; a2 : 常駐マーカー格納アドレス候補

    moveq.l #1,d1                               ; d1 : 返値候補を 1（マーカー無検出）に
    lea.l   TSR_marker,a3                       ; a3 : 常駐マーカー格納アドレス
    cmp.l   (a3)+,(a2)+                         ; 準備した常駐マーカーの上位を候補と比較
    bne     @f                                  ;  違っていたら次へ
    cmp.l   (a3)+,(a2)+                         ; 準備した常駐マーカーの下位を候補と比較
    bne     @f                                  ;  違っていたら次へ
    moveq.l #0,d1                               ; d1 : 返値候補を 1（マーカー検出）に
@@:
;-----------------------------------------------------------------------------------------

    tst.l   (sp)                                ; 元々のSSP / エラーコードチェック
    bmi     @f                                  ; エラーコードなら次へ

    DOS     _SUPER                              ; ユーザモードへ復帰
@@:
    addq.l  #4,sp

    move.l  d1,d0                               ; d0 : 返値に返値候補をセット
    movem.l (sp)+,d1/a1-a3                      ; d1/a1-a3 を復元

    rts

;=========================================================================================

;=========================================================================================
; 常駐サブルーチン
;
; 引数 a5.l     : 常駐完了時のコールバックアドレス
;
; 返値 d0.l = 0 : エラー（常駐済）
;            -1 : エラー（未準備）
;      ccrZ  eq : エラー（常駐済）
;            ne : エラー（未準備）
;
;-----------------------------------------------------------------------------------------

TSR_resident::
    bsr     TSR_check                           ; 常駐チェック
    bgt     @f                                  ; 未常駐（マーカー未検出）なので次へ

    rts                                         ; おしまい

@@:
    clr.l   -(sp)                               ; USP を SSP に設定するモード
    DOS     _SUPER                              ; スーパーバイザーモードへ移行
    move.l  d0,(sp)                             ; 元々の SSP / エラーコード退避

    move.w  sr,-(sp)                            ; ステータスレジスタを退避
    or.w    #$0700,sr                           ; 割り込みマスク

;-----------------------------------------------------------------------------------------

    movea.l TSR_VECTORADDR,a1                   ; a1 : 割込ベクタ格納アドレス
    move.l  #TSR_new_vector,(a1)                ; 新しい割込ベクタを上書き

;-----------------------------------------------------------------------------------------

    move.w  (sp)+,sr                            ; ステータスレジスタを復元 POP

    tst.l   (sp)                                ; 元々のSSP / エラーコードチェック
    bmi     @f                                  ; エラーコードなら次へ

    DOS     _SUPER                              ; ユーザモードへ復帰
@@:
    addq.l  #4,sp

    cmpa.l  #$0,a5                              ; 常駐完了時のコールバックアドレスと 0 を比較
    beq     @f                                  ;  同じならコールバックせずに次へ

    jsr     (a5)                                ; 常駐完了時のコールバック

@@:
;   addq,l  #4,sp                               ; bsr で sp に積まれた pc をなかったことに
    clr.w   -(sp)                               ; 終了コード $00
    move.l  #TSR_end-TSR_begin,-(sp)            ; 常駐バイト数
    DOS     _KEEPPR                             ; 常駐＆終了

;=========================================================================================

;=========================================================================================
; 常駐解除サブルーチン
;
; 返値 d0.l = 1 : エラー（未常駐）
;             0 : 常駐解除成功
;            -1 : エラー（未準備）
;            -2 : エラー（常駐解除失敗）
;      ccrZ  ne : エラー
;            eq : 常駐解除成功
;      ccrN  gt : エラー（未常駐）
;            mi : エラー（未準備／常駐解除失敗）
;
;-----------------------------------------------------------------------------------------

TSR_release::
    bsr     TSR_check                           ; 常駐チェック
    beq     @f                                  ; 常駐しているので次へ

    rts                                         ; おしまい
@@:
    movem.l d1-d2/a0-a5,-(sp)                   ; d1-d2/a0-a5 を退避

    clr.l   -(sp)                               ; USP を SSP に設定するモード
    DOS     _SUPER                              ; スーパーバイザーモードへ移行
    move.l  d0,(sp)                             ; 元々の SSP / エラーコード退避

    move.w  sr,-(sp)                            ; ステータスレジスタを退避
    or.w    #$0700,sr                           ; 割り込みマスク

;-----------------------------------------------------------------------------------------

    movea.l TSR_PROCESS_POINTER,a0              ; a0 : 自身のプロセス管理ポインタ先頭アドレス

    movea.l TSR_VECTORADDR,a1                   ; a1 : 割込ベクタ格納アドレス
    movea.l (a1),a2                             ; a2 : 現在の割込ベクタ（常駐時書換済）
    lea.l   TSR_SAVE_VECTORADDR-TSR_main(a2),a3 ; a3 : 常駐前の割込ベクタ格納アドレス
    movea.l (a3),a4                             ; a4 : 常駐前の割込ベクタ
    cmpa.l  #$000000a8,a1                       ; trap #10 のベクタ格納アドレスと比較して
    blo     TSR_release_finish                  ;  未満なら割込ベクタを復元
    cmpa.l  #$000000b8,a1                       ; trap #14 のベクタ格納アドレスと比較して
    bhi     TSR_release_finish                  ;  超過なら割込ベクタを復元

    move.w  a1,d0                               ; d0 : trap #10〜#14 ベクタの下位アドレス
    sub.w   #$5c,d0                             ; プロセス管理ポインタのオフセットに変換

    movea.l a0,a5                               ; a5 : プロセス管理ポインタの先頭アドレス
TSR_release_check:
    cmpa.l  (a5,d0.w),a2                        ; プロセス管理ポインタ上の該当trap先と
                                                ; 書換済の割込ベクタを比較して
    beq     @f                                  ;  一致していたら次へ

    moveq.l #-2,d1                              ; d1 : 返値候補を -2（常駐解除失敗）に
    bra     99f                                 ; おしまい
@@:
    move.l  $04(a5),d2                          ; d2 : 前のプロセス管理ポインタ候補
    beq     @f                                  ;  0 なら次へ

    movea.l d2,a5                               ; a5 : 前のプロセス管理ポインタ
    bra     TSR_release_check                   ; 続行

@@:
    movea.l a0,a5                               ; a5 : プロセス管理ポインタの先頭アドレス
TSR_release_restore:
    move.l a4,(a5,d0.w)                         ; 常駐前の割込ベクタに戻す

    move.l  $04(a5),d2                          ; d2 : 前のメモリ管理ポインタ先頭候補
    beq     TSR_release_finish                  ;  0 なら常駐解除の仕上げ

    movea.l d2,a5                               ; a5 : 前のプロセス管理ポインタ
    bra     TSR_release_restore                 ; 続行

TSR_release_finish:
    move.l  a4,(a1)                             ; 割込ベクタアドレスを復元

    sub.l   #TSR_new_vector-TSR_marker+$F0,a2   ; a2 : 常駐時のプロセス管理ポインタ+$10

    pea.l   (a2)                                ; 常駐時のメモリ管理ポインタ+$10 を指定して
    DOS     _MFREE                              ;  メモリ開放(常駐解除)
    addq.l  #4,sp

    moveq.l #0,d1                               ; d1 : 返値候補を 0（常駐解除成功）に

99:
;-----------------------------------------------------------------------------------------

    move.w  (sp)+,sr                            ; ステータスレジスタを復元

    tst.l   (sp)                                ; 元々のSSP / エラーコードチェック
    bmi     @f                                  ; エラーコードなら次へ

    DOS     _SUPER                              ; ユーザモードへ復帰
@@:
    addq.l  #4,sp

    move.l  d1,d0                               ; d0 : 返値に返値候補をセット
    movem.l (sp)+,d1-d2/a0-a5                   ; d1-d2/a0-a5 を復元

    rts

;=========================================================================================

    .bss
    .even

;-----------------------------------------------------------------------------------------

TSR_PROCESS_POINTER:
    .ds.l       1                               ; 自身のプロセス管理ポインタ
TSR_VECTORADDR:
    .ds.l       1                               ; 書き換えたい割込ベクタ格納アドレス

;=========================================================================================
